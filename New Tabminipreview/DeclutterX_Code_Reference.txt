# DECLUTTER X GOFULLPAGE CHROME EXTENSION - CODE REFERENCE

## ARCHITECTURE OVERVIEW

The Declutter X GoFullPage extension is built on a modular architecture that separates concerns across multiple components:

1. **Core Application (main.js)** - Coordinates all components and manages the application flow
2. **Tab Manager (tab-manager.js)** - Handles tab listing, selection, and status management
3. **UI Controller (ui-controller.js)** - Manages the user interface and user interactions
4. **Workspace Manager (workspace-indexeddb-manager.js)** - Handles storage and retrieval of workspaces
5. **Sidebar Component (sidebar.js)** - Provides workspace management interface
6. **Cache Manager (indexeddb-cache-manager.js)** - Manages caching of tab screenshots
7. **Page Capture (page-capture.js)** - Handles the capture of full-page screenshots
8. **Image Processor (image-processor.js)** - Processes captured screenshots

## COMPONENT RESPONSIBILITIES

### 1. Core Application (main.js)

```javascript
class App {
    constructor() {
        // Initialize components
        this.tabManager = null;
        this.ui = null;
        this.cacheManager = null;
        this.tabGroupManager = null;
        this.workspaceManager = null;
        this.sidebar = null;
        // ...other properties
    }

    async init() {
        // Initialize modules with error protection
        this.tabManager = new TabManager();
        this.ui = new UIController();
        this.cacheManager = new CacheManager();
        // ...initialize other components
    }

    // Methods for handling tab selection, screenshot capture, etc.
}
```

The App class serves as the central controller that initializes all components, sets up event listeners, and coordinates the flow of data between components. It handles tab selection, screenshot capture, cache management, and workspace interactions.

### 2. Tab Manager (tab-manager.js)

```javascript
export default class TabManager {
    constructor() {
        this.tabContainer = null;
        this.onTabSelect = null;
        this.tabs = [];
        this.extensionTabId = null;
        this.cachedTabIds = new Set();
        this.persistentTabs = []; // Tracks closed tabs
        this.autoLoadNewTabs = true; // Controls auto-detection of new tabs
        // ...other properties
    }

    async init(container, selectCallback) {
        // Initialize tab manager
        // Set up Chrome API event listeners
        
        // Load saved autoLoadNewTabs state from localStorage
        // Implement persistence of user preferences across sessions
        
        // Log initialization status for debugging
    }

    // Methods for tab operations
    async refreshTabs() { /* ... */ }
    updateTabStatus() { /* ... */ }
    renderTabs() { /* ... */ }
    selectTab(tabId) { /* ... */ }
    
    // Methods for tab state management
    async handleLoadNew() {
        // Toggle auto-load state
        // Save preference to localStorage for persistence
        // Update UI to reflect current state
    }
    // ...other methods
}
```

The TabManager handles all tab-related operations, including listing tabs, tracking their status, and managing tab selection. It maintains a list of both open and closed tabs, integrates with Chrome's tab group API, and provides methods for tab navigation and management. Recent improvements include localStorage persistence for user preferences, enhanced error handling, and better console logging for debugging.

### 3. UI Controller (ui-controller.js)

```javascript
class UIController {
    constructor() {
        this.previewContainer = null;
        this.progressContainer = null;
        this.progressBar = null;
        this.progressText = null;
        this.errorContainer = null;
        this.messageContainer = null;
        // ...other properties
    }

    init(selectors) {
        // Initialize UI elements
        // Set up action buttons
    }

    // UI methods
    showProgress(percent, message) { /* ... */ }
    showError(titleOrMessage, message, retryCallback) { /* ... */ }
    showPreview(dataUrl, metadata) { /* ... */ }
    // ...other methods
}
```

The UIController manages all user interface elements and interactions. It handles preview display, progress indicators, error messages, modal dialogs, and button events. It also manages animations, transitions, and layout adjustments.

### 4. Workspace Manager (workspace-indexeddb-manager.js)

```javascript
export default class WorkspaceIndexedDBManager {
    constructor() {
        this.DB_NAME = 'declutterWorkspacesDB';
        this.STORE_NAME = 'workspaces';
        this.DB_VERSION = 1;
        this.db = null;
    }

    async init() {
        // Initialize IndexedDB database
    }

    // Database operations
    async loadWorkspaces() { /* ... */ }
    async saveWorkspace(workspace) { /* ... */ }
    async deleteWorkspace(id) { /* ... */ }
    async renameWorkspace(id, newName) { /* ... */ }
    // ...other methods
}
```

The WorkspaceIndexedDBManager handles saving, loading, and managing tab workspaces in IndexedDB. It provides CRUD operations for workspaces and manages data serialization.

### 5. Sidebar Component (sidebar.js)

```javascript
export default class Sidebar {
    constructor(workspaceManager) {
        this.workspaceManager = workspaceManager;
        this.sidebarElement = null;
        this.isVisible = false;
        this.isPinned = false;
        // ...other properties
    }

    init() {
        this.createSidebar();
        this.createToggleButton();
        this.setupEventListeners();
        return this;
    }

    // Sidebar methods
    createSidebar() { /* ... */ }
    showSidebar() { /* ... */ }
    hideSidebar() { /* ... */ }
    renderWorkspaces() { /* ... */ }
    // ...other methods
}
```

The Sidebar component creates and manages the workspace sidebar interface. It handles sidebar visibility, pinning, workspace listing, and interactions with workspace items.

### 6. Cache Manager (indexeddb-cache-manager.js)

```javascript
export default class CacheManager {
    constructor() {
        this.DB_NAME = 'declutterCacheDB';
        this.STORE_NAME = 'screenshots';
        this.META_STORE_NAME = 'metadata';
        this.DB_VERSION = 1;
        this.db = null;
        // ...other properties
         // Enhanced workspace interactions
    viewWorkspaceAsCurrent(id) {
        // Create option dialog with clear instructions
        // Provide multiple methods for tab management
        // Display user-friendly guidance for intelligent tab opening
    }

    async init() {
        // Initialize IndexedDB database
    }

    // Cache operations
    async addToCache(tabId, dataUrl, metadata) { /* ... */ }
    async getFromCache(tabId) { /* ... */ }
    async removeFromCache(tabId) { /* ... */ }
    async clearCache() { /* ... */ }
    // ...other methods
}
```

The CacheManager handles storage and retrieval of screenshot data using IndexedDB. It includes methods for adding, getting, and removing cache entries, managing cache size, and tracking metadata.

### 7. Page Capture (page-capture.js)

```javascript
// Content script injected into pages for screenshot capture
function captureFullPage() {
    const captureData = {
        totalWidth: 0,
        totalHeight: 0,
        viewportWidth: window.innerWidth,
        viewportHeight: window.innerHeight,
        scrollX: window.scrollX,
        scrollY: window.scrollY,
        arrangements: [],
        currentArrangement: 0
    };

    // Calculate page dimensions
    // Generate scroll positions (arrangements)
    // Capture each viewport and report progress
    // ...implementation
}

// Message listener
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === 'capture_page') {
        captureFullPage()
            .then(result => sendResponse({ success: true, ...result }))
            .catch(error => sendResponse({ success: false, error: error.message }));
        return true; // Keep channel open for async response
    }
    // ...other message handlers
});
```

The page-capture.js script is injected into web pages to capture full-page screenshots. It calculates page dimensions, generates scroll positions, captures each viewport, and reports progress back to the extension.

### 8. Image Processor (image-processor.js)

```javascript
export default class ImageProcessor {
    constructor() {
        // Initialize properties
    }

    // Image processing methods
    stitchScreenshots(screenshots) { /* ... */ }
    compressImage(dataUrl, quality) { /* ... */ }
    cropImage(dataUrl, rect) { /* ... */ }
    // ...other methods
}
```

The ImageProcessor handles image manipulation operations such as stitching multiple screenshots together, compressing images, and cropping screenshots.

## KEY FEATURES

### 1. Tab Management

- **Persistent Tabs**: Tabs remain in the list even when closed in Chrome
- **Tab Grouping**: Integration with Chrome's tab groups
- **Tab Navigation**: Next/previous navigation with keyboard support
- **Undo Closed Tabs**: History of closed tabs for undo operations

### 2. Screenshot Capture

- **Full-Page Screenshots**: Captures the entire page, not just the visible area
- **Progressive Capture**: Shows progress during capture
- **Image Stitching**: Combines multiple screenshots into a single image
- **Format Options**: Options for image format and quality

### 3. Workspace Management

- **Save Workspaces**: Save collections of tabs as named workspaces
- **Load Workspaces**: Restore saved workspaces
- **View Workspaces**: Preview workspace contents without opening tabs
- **Sidebar Interface**: Easy access to workspace management

### 4. Caching System

- **Screenshot Caching**: Stores screenshots for quick access
- **Cache Management**: Controls cache size and cleanup
- **Batch Operations**: Optimized for handling multiple screenshots

## CHROME EXTENSION APIS USED

- **chrome.tabs**: For querying and manipulating tabs
- **chrome.tabGroups**: For integrating with Chrome's tab groups
- **chrome.scripting**: For injecting content scripts
- **chrome.storage**: For storing extension settings
- **chrome.runtime**: For message passing between components

## DATA FLOW

1. **Tab Selection**:
   User selects a tab → TabManager.selectTab() → App.handleTabSelect() → UI.showPreview() → CacheManager.getFromCache()

2. **Screenshot Capture**:
   User clicks capture → App.captureScreenshot() → chrome.runtime.sendMessage() → background.js → page-capture.js → ImageProcessor.stitchScreenshots() → CacheManager.addToCache()

3. **Workspace Operations**:
   User saves workspace → App.saveWorkspace() → WorkspaceManager.saveWorkspace() → Sidebar.renderWorkspaces()

## CODE PATTERNS

1. **Module Pattern**: Components are isolated with clear interfaces
2. **Error Handling**: Comprehensive error handling with fallbacks and user feedback
3. **Async/Await**: Consistent use of async/await for asynchronous operations
4. **Event-Driven Architecture**: Components communicate through events
5. **Dependency Injection**: Components receive dependencies in constructors or methods

## IMPLEMENTATION CHALLENGES

1. **Full-Page Screenshots**: Capturing full pages requires complex scrolling and stitching logic
2. **Tab Persistence**: Tracking closed tabs while maintaining Chrome's ordering
3. **Workspace Management**: Creating a flexible system for saving and loading tab sets
4. **Performance**: Managing memory usage with potentially large screenshots
5. **Error Recovery**: Handling network issues, permission problems, and browser limitations

## EXTENSION LIFECYCLE

1. **Installation**: Extension is installed, background script is registered
2. **Activation**: User clicks extension icon, main UI is loaded
3. **Tab Management**: User interacts with tab list and preview
4. **Screenshot Capture**: User initiates capture, progress is displayed
5. **Workspace Operations**: User saves, loads, or modifies workspaces
6. **Cache Management**: Screenshots are cached for quick access

## SECURITY CONSIDERATIONS

1. **Permission Model**: Uses minimal required permissions
2. **Data Storage**: All data is stored locally, no external transmission
3. **Content Security**: Implements Content Security Policy
4. **Error Handling**: Prevents exposure of sensitive information in errors

## PERFORMANCE OPTIMIZATIONS

1. **Lazy Loading**: Components are initialized only when needed
2. **Image Compression**: Screenshots are compressed to reduce storage requirements
3. **Batch Operations**: Multiple operations are batched for efficiency
4. **IndexedDB Indexing**: Efficient data access through database indexes
5. **Resource Cleanup**: Proper cleanup of resources to prevent memory leaks



ALSO READ THIS THOROUGHLY:

# DECLUTTER X GOFULLPAGE CHROME EXTENSION - CODE REFERENCE

## ARCHITECTURE OVERVIEW

The Declutter X GoFullPage extension is built on a modular architecture that separates concerns across multiple components:

1. **Core Application (main.js)** - Coordinates all components and manages the application flow
2. **Tab Manager (tab-manager.js)** - Handles tab listing, selection, and status management
3. **UI Controller (ui-controller.js)** - Manages the user interface and user interactions
4. **Workspace Manager (workspace-indexeddb-manager.js)** - Handles storage and retrieval of workspaces
5. **Sidebar Component (sidebar.js)** - Provides workspace management interface
6. **Cache Manager (indexeddb-cache-manager.js)** - Manages caching of tab screenshots
7. **Page Capture (page-capture.js)** - Handles the capture of full-page screenshots
8. **Image Processor (image-processor.js)** - Processes captured screenshots

## COMPONENT RESPONSIBILITIES

### 1. Core Application (main.js)

```javascript
class App {
    constructor() {
        // Initialize components
        this.tabManager = null;
        this.ui = null;
        this.cacheManager = null;
        this.tabGroupManager = null;
        this.workspaceManager = null;
        this.sidebar = null;
        // ...other properties
    }

    async init() {
        // Initialize modules with error protection
        this.tabManager = new TabManager();
        this.ui = new UIController();
        this.cacheManager = new CacheManager();
        // ...initialize other components
    }

    // Methods for handling tab selection, screenshot capture, etc.
}
```

The App class serves as the central controller that initializes all components, sets up event listeners, and coordinates the flow of data between components. It handles tab selection, screenshot capture, cache management, and workspace interactions.

### 2. Tab Manager (tab-manager.js)

```javascript
export default class TabManager {
    constructor() {
        this.tabContainer = null;
        this.onTabSelect = null;
        this.tabs = [];
        this.extensionTabId = null;
        this.cachedTabIds = new Set();
        this.persistentTabs = []; // Tracks closed tabs
        // ...other properties
    }

    async init(container, selectCallback) {
        // Initialize tab manager
        // Set up Chrome API event listeners
    }

    // Methods for tab operations
    async refreshTabs() { /* ... */ }
    updateTabStatus() { /* ... */ }
    renderTabs() { /* ... */ }
    selectTab(tabId) { /* ... */ }
    // ...other methods
}
```

The TabManager handles all tab-related operations, including listing tabs, tracking their status, and managing tab selection. It maintains a list of both open and closed tabs, integrates with Chrome's tab group API, and provides methods for tab navigation and management.

### 3. UI Controller (ui-controller.js)

```javascript
class UIController {
    constructor() {
        this.previewContainer = null;
        this.progressContainer = null;
        this.progressBar = null;
        this.progressText = null;
        this.errorContainer = null;
        this.messageContainer = null;
        // ...other properties
    }

    init(selectors) {
        // Initialize UI elements
        // Set up action buttons
    }

    // UI methods
    showProgress(percent, message) { /* ... */ }
    showError(titleOrMessage, message, retryCallback) { /* ... */ }
    showPreview(dataUrl, metadata) { /* ... */ }
    // ...other methods
}
```

The UIController manages all user interface elements and interactions. It handles preview display, progress indicators, error messages, modal dialogs, and button events. It also manages animations, transitions, and layout adjustments.

### 4. Workspace Manager (workspace-indexeddb-manager.js)

```javascript
export default class WorkspaceIndexedDBManager {
    constructor() {
        this.DB_NAME = 'declutterWorkspacesDB';
        this.STORE_NAME = 'workspaces';
        this.DB_VERSION = 1;
        this.db = null;
    }

    async init() {
        // Initialize IndexedDB database
    }

    // Database operations
    async loadWorkspaces() { /* ... */ }
    async saveWorkspace(workspace) { /* ... */ }
    async deleteWorkspace(id) { /* ... */ }
    async renameWorkspace(id, newName) { /* ... */ }
    // ...other methods
}
```

The WorkspaceIndexedDBManager handles saving, loading, and managing tab workspaces in IndexedDB. It provides CRUD operations for workspaces and manages data serialization.

### 5. Sidebar Component (sidebar.js)

```javascript
export default class Sidebar {
    constructor(workspaceManager) {
        this.workspaceManager = workspaceManager;
        this.sidebarElement = null;
        this.isVisible = false;
        this.isPinned = false;
        // ...other properties
    }

    init() {
        this.createSidebar();
        this.createToggleButton();
        this.setupEventListeners();
        return this;
    }

    // Sidebar methods
    createSidebar() { /* ... */ }
    showSidebar() { /* ... */ }
    hideSidebar() { /* ... */ }
    renderWorkspaces() { /* ... */ }
    // ...other methods
}
```
The Sidebar component creates and manages the workspace sidebar interface. It handles sidebar visibility, pinning, workspace listing, and interactions with workspace items. Recent enhancements include improved user guidance for workspace interactions, clearer instructions for tab opening methods, and better explanations of intelligent tab loading features.

### 6. Cache Manager (indexeddb-cache-manager.js)

```javascript
export default class CacheManager {
    constructor() {
        this.DB_NAME = 'declutterCacheDB';
        this.STORE_NAME = 'screenshots';
        this.META_STORE_NAME = 'metadata';
        this.DB_VERSION = 1;
        this.db = null;
        // ...other properties
    }

    async init() {
        // Initialize IndexedDB database
    }

    // Cache operations
    async addToCache(tabId, dataUrl, metadata) { /* ... */ }
    async getFromCache(tabId) { /* ... */ }
    async removeFromCache(tabId) { /* ... */ }
    async clearCache() { /* ... */ }
    // ...other methods
}
```

The CacheManager handles storage and retrieval of screenshot data using IndexedDB. It includes methods for adding, getting, and removing cache entries, managing cache size, and tracking metadata.

### 7. Page Capture (page-capture.js)

```javascript
// Content script injected into pages for screenshot capture
function captureFullPage() {
    const captureData = {
        totalWidth: 0,
        totalHeight: 0,
        viewportWidth: window.innerWidth,
        viewportHeight: window.innerHeight,
        scrollX: window.scrollX,
        scrollY: window.scrollY,
        arrangements: [],
        currentArrangement: 0
    };

    // Calculate page dimensions
    // Generate scroll positions (arrangements)
    // Capture each viewport and report progress
    // ...implementation
}

// Message listener
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === 'capture_page') {
        captureFullPage()
            .then(result => sendResponse({ success: true, ...result }))
            .catch(error => sendResponse({ success: false, error: error.message }));
        return true; // Keep channel open for async response
    }
    // ...other message handlers
});
```

The page-capture.js script is injected into web pages to capture full-page screenshots. It calculates page dimensions, generates scroll positions, captures each viewport, and reports progress back to the extension.

### 8. Image Processor (image-processor.js)

```javascript
export default class ImageProcessor {
    constructor() {
        // Initialize properties
    }

    // Image processing methods
    stitchScreenshots(screenshots) { /* ... */ }
    compressImage(dataUrl, quality) { /* ... */ }
    cropImage(dataUrl, rect) { /* ... */ }
    // ...other methods
}
```

The ImageProcessor handles image manipulation operations such as stitching multiple screenshots together, compressing images, and cropping screenshots.

## KEY FEATURES

### 1. Tab Management

- **Persistent Tabs**: Tabs remain in the list even when closed in Chrome
- **Tab Grouping**: Integration with Chrome's tab groups
- **Tab Navigation**: Next/previous navigation with keyboard support
- **Undo Closed Tabs**: History of closed tabs for undo operations
- **Preference Persistence**: User preferences are saved across sessions

### 2. Screenshot Capture

- **Full-Page Screenshots**: Captures the entire page, not just the visible area
- **Progressive Capture**: Shows progress during capture
- **Image Stitching**: Combines multiple screenshots into a single image
- **Format Options**: Options for image format and quality

### 3. Workspace Management

- **Save Workspaces**: Save collections of tabs as named workspaces
- **Intelligent Loading**: Loads workspaces with duplicate prevention
- **Preview Workspaces**: View workspace contents without opening tabs
- **Usage Metrics**: Tracks statistics about tab operations
- **Sidebar Interface**: Easy access to workspace management with clear guidance

### 4. Caching System

- **Screenshot Caching**: Stores screenshots for quick access
- **Cache Management**: Controls cache size and cleanup
- **Batch Operations**: Optimized for handling multiple screenshots

## CHROME EXTENSION APIS USED

- **chrome.tabs**: For querying and manipulating tabs
- **chrome.tabGroups**: For integrating with Chrome's tab groups
- **chrome.scripting**: For injecting content scripts
- **chrome.storage**: For storing extension settings
- **chrome.runtime**: For message passing between components

## DATA FLOW

1. **Tab Selection**:
   User selects a tab → TabManager.selectTab() → App.handleTabSelect() → UI.showPreview() → CacheManager.getFromCache()

2. **Screenshot Capture**:
   User clicks capture → App.captureScreenshot() → chrome.runtime.sendMessage() → background.js → page-capture.js → ImageProcessor.stitchScreenshots() → CacheManager.addToCache()

3. **Workspace Operations**:
   User saves workspace → App.saveWorkspace() → WorkspaceManager.saveWorkspace() → Sidebar.renderWorkspaces()

4. **Workspace Loading**:
   User loads workspace → App.loadWorkspace() → Check for existing tabs → Open only necessary tabs → Update UI with metrics

## CODE PATTERNS

1. **Module Pattern**: Components are isolated with clear interfaces
2. **Error Handling**: Comprehensive error handling with fallbacks and user feedback
3. **Async/Await**: Consistent use of async/await for asynchronous operations
4. **Event-Driven Architecture**: Components communicate through events
5. **Dependency Injection**: Components receive dependencies in constructors or methods

## IMPLEMENTATION CHALLENGES

1. **Full-Page Screenshots**: Capturing full pages requires complex scrolling and stitching logic
2. **Tab Persistence**: Tracking closed tabs while maintaining Chrome's ordering
3. **Workspace Management**: Creating a flexible system for saving and loading tab sets
4. **Performance**: Managing memory usage with potentially large screenshots
5. **Error Recovery**: Handling network issues, permission problems, and browser limitations

## EXTENSION LIFECYCLE

1. **Installation**: Extension is installed, background script is registered
2. **Activation**: User clicks extension icon, main UI is loaded
3. **Tab Management**: User interacts with tab list and preview
4. **Screenshot Capture**: User initiates capture, progress is displayed
5. **Workspace Operations**: User saves, loads, or modifies workspaces
6. **Cache Management**: Screenshots are cached for quick access

## SECURITY CONSIDERATIONS

1. **Permission Model**: Uses minimal required permissions
2. **Data Storage**: All data is stored locally, no external transmission
3. **Content Security**: Implements Content Security Policy
4. **Error Handling**: Prevents exposure of sensitive information in errors

## PERFORMANCE OPTIMIZATIONS

1. **Lazy Loading**: Components are initialized only when needed
2. **Image Compression**: Screenshots are compressed to reduce storage requirements
3. **Batch Operations**: Multiple operations are batched for efficiency
4. **IndexedDB Indexing**: Efficient data access through database indexes
5. **Resource Cleanup**: Proper cleanup of resources to prevent memory leaks
